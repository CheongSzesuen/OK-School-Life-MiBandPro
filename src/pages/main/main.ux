<template>
  <div>
    <div if="{{!loaded}}">
      <text>加载中...</text>
      <progress type="circular"></progress>
    </div>
    
    <div if="{{loaded}}" class="container">
      <div class="status-bar">
        <text class="status-text">分数: {{ score }}</text>
      </div>
      
      <div class="event-container">
        <text class="event-title">{{ currentEvent?.question || '加载中...' }}</text>
        
        <div class="options-container">
          <block for="(option, index) in options">
            <input 
              class="option-button" 
              type="button" 
              value="{{ option.text }}"
              onclick="handleOption(option.key)" 
            />
          </block>
        </div>
        
        <text class="result-text" if="{{ result }}">{{ result }}</text>
        <text class="game-over" if="{{ gameOver }}">游戏结束！得分: {{ score }}</text>
      </div>
    </div>
  </div>
</template>

<script>
  import router from '@system.router'
  import storage from '@system.storage'
  import fetch from '@system.fetch'
  import prompt from '@system.prompt'
  
  export default {
    private: {
      loaded: false,
      gameOver: false,
      gamePaused: false,  // 新增暂停状态
      score: 0,
      currentEvent: null,
      options: [],
      result: '',
      eventIdx: 0,
      eventsData: [],
      school: '1'
    },
    
    onInit() {
      this.school = router.getParams().school || '1';
      this.initGame();
    },
    
    onReady() {
      console.log("页面渲染完成");
    },
    
    onHide() {
      this.gamePaused = true;
    },
    
    onShow() {
      if (this.gamePaused) {
        this.gamePaused = false;
        this.startEvent();
      }
    },
    
    async initGame() {
      try {
        await this.loadGameData();
        this.startEvent();
        this.loaded = true;
      } catch (error) {
        console.error("初始化失败:", error);
        prompt.showToast({ message: '初始化失败' });
      }
    },
    
    async loadGameData() {
      try {
        const response = await fetch.fetch({
          url: '/common/data/events.json'
        });
        
        if (response.code === 200) {
          this.eventsData = JSON.parse(response.data);
        } else {
          this.useFallbackData();
        }
      } catch (e) {
        console.error("数据加载失败:", e);
        this.useFallbackData();
      }
    },
    
    useFallbackData() {
      this.eventsData = {
        event_1_list: [
          {
            question: "默认事件：遇到老师提问",
            choices: { A: "举手回答", B: "低头回避" },
            results: { A: "+1分 勇气可嘉", B: "机会留给别人了" }
          }
        ],
        event_2_list: [],
        event_3_list: []
      };
      prompt.showToast({ message: '使用默认数据' });
    },
    
    startEvent() {
      if (this.gameOver || !this.eventsData.length) return;
      
      const eventList = this.getEventList();
      if (this.eventIdx >= eventList.length) {
        this.endGame('恭喜通关！');
        return;
      }
      
      this.currentEvent = eventList[this.eventIdx];
      this.setupEvent();
    },
    
    getEventList() {
      if (!this.eventsData) return [];
      
      switch (this.school) {
        case '1': return this.eventsData.event_1_list || [];
        case '2': return this.eventsData.event_2_list || [];
        case '3': return this.eventsData.event_3_list || [];
        default: return this.eventsData.event_1_list || [];
      }
    },
    
    setupEvent() {
      this.result = '';
      this.options = Object.keys(this.currentEvent.choices || {}).map(key => ({
        key,
        text: this.currentEvent.choices[key]
      }));
    },
    
    handleOption(choice) {
      if (this.gameOver) return;
      
      this.result = this.currentEvent.results?.[choice] || '';
      this.score += 1;
      
      if (this.currentEvent.end_game_choices?.includes(choice)) {
        this.endGame('游戏结束');
        return;
      }
      
      setTimeout(() => {
        this.eventIdx += 1;
        this.startEvent();
      }, 0);
    },
    
    endGame(message) {
      this.gameOver = true;
      this.result = message;
      
      storage.set({
        key: 'game_score',
        value: this.score.toString(),
        success: () => prompt.showToast({ message: '分数保存成功' }),
        fail: (err) => console.error('保存失败', err)
      });
    }
  }
</script>